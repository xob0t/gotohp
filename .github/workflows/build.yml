name: Build Release

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      os:
        description: "OS to build (macos, windows, linux, all)"
        required: true
        default: "all"
        type: choice
        options:
          - macos
          - windows
          - linux
          - all

permissions:
  contents: write

jobs:
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (inputs.os == 'macos' || inputs.os == 'all')) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Wails3
        run: go install -v github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Build macOS App
        run: |
          mkdir -p darwinBinaries
          wails3 doctor

          # Update build assets
          wails3 task common:update:build-assets

          # Build the app package
          task darwin:package:universal

          npm install --global create-dmg
          cd bin
          create-dmg gotohp.app --dmg-title "gotohp"

          # Move any .dmg file found to darwinBinaries with the correct name
          for dmg in *.dmg; do
            mv "$dmg" "../darwinBinaries/gotohp-universal.dmg"
            break
          done

          echo "universalDMGPath=darwinBinaries/gotohp-universal.dmg" >> $GITHUB_ENV

          cd ..
          ls -alh darwinBinaries

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: ${{ env.universalDMGPath }}

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (inputs.os == 'windows' || inputs.os == 'all')) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install NSIS
        shell: pwsh
        run: |
          # Install NSIS via Chocolatey
          choco install nsis -y --no-progress
          refreshenv
          Write-Host "NSIS version: $(makensis -VERSION)"

      - name: Install Wails3
        shell: cmd
        run: go install -v github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Build Windows App
        shell: pwsh
        run: |
          mkdir -p release
          wails3 doctor

          # Update build assets
          wails3 task common:update:build-assets

          # Build the application directly (skip installer for now)
          task production

          Move-Item -Path "bin\gotohp-amd64-installer.exe" -Destination "windowsBinaries\gotohp-x64.exe"
          echo "WINDOWS_EXE_PATH=windowsBinaries/gotohp-x64.exe" >> $env:GITHUB_ENV

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: ${{ env.WINDOWS_EXE_PATH }}

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (inputs.os == 'linux' || inputs.os == 'all')) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libwebkit2gtk-4.1-dev gcc libgtk-3-dev pkg-config

      - name: Install Wails3
        run: go install -v github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Build Linux App
        run: |
          mkdir -p linuxAppImage
          wails3 doctor

          # Update build assets
          wails3 task common:update:build-assets

          task package

          mv bin/gotohp-x86_64.AppImage "linuxAppImage/gotohp_amd64.AppImage"
          echo "LINUX_APP_PATH=linuxAppImage/gotohp_amd64.AppImage" >> $GITHUB_ENV

          ls -alh linuxAppImage

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: ${{ env.LINUX_APP_PATH }}

  create-release:
    name: Create Release
    needs: [build-macos, build-windows, build-linux]
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.os == 'all' && needs.build-macos.result == 'success' && needs.build-windows.result == 'success' && needs.build-linux.result == 'success') }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Prepare release files
        run: |
          mkdir -p final_release
          find release -type f -not -path "*/\.*" -exec cp {} final_release/ \;
          ls -la final_release/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            final_release/*
          tag_name: ${{ github.ref }}
          draft: true
